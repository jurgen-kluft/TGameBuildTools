using System;
using System.Diagnostics;

namespace SkeinFish
{
    public class SkeinTesting
    {
        private readonly Skein _sourceHash;

        public SkeinTesting(Skein sourceHash)
        {
            _sourceHash = sourceHash;
        }

        /// <summary>
        /// Benchmarks this instance of the Skein hash function.
        /// </summary>
        /// <param name="iterations">Number of hash computations to perform.</param>
        /// <returns>Resulting speed in megabytes per second.</returns>
        public double Benchmark(long iterations)
        {
            var outputBytes = _sourceHash.HashSize/8;
            var hash = new byte[outputBytes];
            var sw = new Stopwatch();

            sw.Start();
            _sourceHash.Initialize();

            for (long i = 0; i < iterations; i++)
                _sourceHash.TransformBlock(hash, 0, outputBytes, hash, 0);

            _sourceHash.TransformFinalBlock(hash, 0, outputBytes);
            sw.Stop();

            double opsPerTick = iterations / (double)sw.ElapsedTicks;
            double opsPerSec = opsPerTick * TimeSpan.FromSeconds(1).Ticks;

            double mbs = opsPerSec * (_sourceHash.StateSize / 8) / 1024 / 1024;

            return mbs;
        }

        /// <summary>
        /// Tests the 256, 512, and 1024 bit versions of Skein against
        /// known test vectors.
        /// </summary>
        /// <returns>True if the test succeeded without errors, false otherwise.</returns>
        public static bool TestHash()
        {
			byte[] hash;

			bool do_test = true;
			if (do_test)
			{
				var skein = new Skein(512,512);

				byte[] result = new byte[]
				{
					0x71, 0xB7, 0xBC, 0xE6, 0xFE, 0x64, 0x52, 0x22, 0x7B, 0x9C, 0xED, 0x60, 0x14, 0x24, 0x9E, 0x5B,
					0xF9, 0xA9, 0x75, 0x4C, 0x3A, 0xD6, 0x18, 0xCC, 0xC4, 0xE0, 0xAA, 0xE1, 0x6B, 0x31, 0x6C, 0xC8,
					0xCA, 0x69, 0x8D, 0x86, 0x43, 0x07, 0xED, 0x3E, 0x80, 0xB6, 0xEF, 0x15, 0x70, 0x81, 0x2A, 0xC5,
					0x27, 0x2D, 0xC4, 0x09, 0xB5, 0xA0, 0x12, 0xDF, 0x2A, 0x57, 0x91, 0x02, 0xF3, 0x40, 0x61, 0x7A
				};

				// Hashes are computed twice to make sure the hasher
				// re-initializes itself properly

				// Make test vector for 256-bit hash
				var testVector = new byte[1] { 0xFF };

				hash = skein.ComputeHash(testVector);
				hash = skein.ComputeHash(testVector);

				// Compare with 512-bit test vector
				for (int i = 0; i < result.Length; i++)
					if (hash[i] != result[i]) return false;

			}

			if (do_test)
			{
				var skein = new Skein(512,256);

				byte[] result = new byte[]
				{
					0x1A, 0x6A, 0x5B, 0xA0, 0x8E, 0x74, 0xA8, 0x64, 0xB5, 0xCB, 0x05, 0x2C, 0xFB, 0x9B, 0x2F, 0xA1,
					0x28, 0x20, 0x32, 0x30, 0xA4, 0xD9, 0x92, 0x3A, 0x32, 0x9F, 0x54, 0x27, 0xC4, 0x77, 0xA4, 0xDB
				};

				// Hashes are computed twice to make sure the hasher
				// re-initializes itself properly

				// Make test vector for 256-bit hash
				var testVector = new byte[] 
				{
					0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
					0xEF, 0xEE, 0xED, 0xEC, 0xEB, 0xEA, 0xE9, 0xE8, 0xE7, 0xE6, 0xE5, 0xE4, 0xE3, 0xE2, 0xE1, 0xE0,
					0xDF, 0xDE, 0xDD, 0xDC, 0xDB, 0xDA, 0xD9, 0xD8, 0xD7, 0xD6, 0xD5, 0xD4, 0xD3, 0xD2, 0xD1, 0xD0,
					0xCF, 0xCE, 0xCD, 0xCC, 0xCB, 0xCA, 0xC9, 0xC8, 0xC7, 0xC6, 0xC5, 0xC4, 0xC3, 0xC2, 0xC1, 0xC0,
					0xBF, 0xBE, 0xBD, 0xBC, 0xBB, 0xBA, 0xB9, 0xB8, 0xB7, 0xB6, 0xB5, 0xB4, 0xB3, 0xB2, 0xB1, 0xB0,
					0xAF, 0xAE, 0xAD, 0xAC, 0xAB, 0xAA, 0xA9, 0xA8, 0xA7, 0xA6, 0xA5, 0xA4, 0xA3, 0xA2, 0xA1, 0xA0,
					0x9F, 0x9E, 0x9D, 0x9C, 0x9B, 0x9A, 0x99, 0x98, 0x97, 0x96, 0x95, 0x94, 0x93, 0x92, 0x91, 0x90,
					0x8F, 0x8E, 0x8D, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81, 0x80
				};

				hash = skein.ComputeHash(testVector);
				hash = skein.ComputeHash(testVector);

				// Compare with 512-bit test vector
				for (int i = 0; i < result.Length; i++)
					if (hash[i] != result[i]) return false;
			}


            return true;
        }
    }
}
